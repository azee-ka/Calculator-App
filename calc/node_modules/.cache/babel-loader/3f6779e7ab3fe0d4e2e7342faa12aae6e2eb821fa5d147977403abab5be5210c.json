{"ast":null,"code":"var _jsxFileName = \"/Users/loveveersingh/Downloads/Github - Projects/Calculator/calc/src/utils/context/authentication.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// AuthContext.js\nimport React, { createContext, useContext, useReducer, useEffect, useState } from 'react';\nimport apiUrl from '../config/apiUrl';\nimport axios from 'axios'; // Import axios\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialAuthState = {\n  isAuthenticated: false,\n  user: {\n    id: null,\n    username: '',\n    first_name: '',\n    last_name: '',\n    email: '',\n    profile_picture: null,\n    bio: '',\n    user_type: ''\n  }\n};\nconst authActionTypes = {\n  LOGIN: 'LOGIN',\n  LOGOUT: 'LOGOUT'\n};\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case authActionTypes.LOGIN:\n      const {\n        user,\n        token\n      } = action.payload;\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: user,\n        token: token\n      };\n    // Include token in authState\n    case authActionTypes.LOGOUT:\n      return {\n        ...initialAuthState\n      };\n    default:\n      return state;\n  }\n};\nconst AuthContext = /*#__PURE__*/createContext();\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authState, authDispatch] = useReducer(authReducer, initialAuthState);\n  const [isAuthenticated, setIsAuthenticated] = useState(JSON.parse(localStorage.getItem('authState')) !== null ? JSON.parse(localStorage.getItem('authState')).token !== null : false);\n\n  // Load authentication state from localStorage on component mount\n  useEffect(() => {\n    const storedAuthStateString = localStorage.getItem('authState');\n    try {\n      const storedAuthState = JSON.parse(storedAuthStateString);\n\n      // Check if a valid token is present\n      setIsAuthenticated(storedAuthState && storedAuthState.token !== null && storedAuthState.token !== undefined);\n      if (storedAuthState && storedAuthState.token) {\n        authDispatch({\n          type: authActionTypes.LOGIN,\n          payload: {\n            user: storedAuthState.user,\n            token: storedAuthState.token\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error parsing stored auth state:', error);\n      setIsAuthenticated(false);\n    }\n  }, [isAuthenticated]);\n\n  // Update localStorage whenever authState changes\n  useEffect(() => {\n    localStorage.setItem('authState', JSON.stringify(authState));\n  }, [authState]);\n  const updateUserInfo = async responseData => {\n    // Update user context with the fetched user information\n    authDispatch({\n      type: authActionTypes.LOGIN,\n      payload: {\n        user: {\n          ...authState.user,\n          user_type: responseData.user_type\n        },\n        isAuthenticated: authState.isAuthenticated,\n        token: authState.token\n      }\n    });\n  };\n  const login = responseData => {\n    authDispatch({\n      type: authActionTypes.LOGIN,\n      payload: {\n        user: responseData.user,\n        isAuthenticated: responseData.message === \"Login successful.\" || responseData.message === \"User registered successfully.\" ? true : false,\n        token: responseData.token\n      }\n    });\n    console.log(authState);\n  };\n  const getUserInfo = async credentials => {\n    try {\n      const response = await fetch(`${apiUrl}user/get-user-info/`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Token ${credentials.token}`\n        }\n      });\n      if (response.ok) {\n        const userData = await response.json();\n        authDispatch({\n          type: authActionTypes.LOGIN,\n          payload: {\n            user: userData,\n            token: credentials.token\n          }\n        });\n      } else {\n        console.error('Authentication failed');\n      }\n    } catch (error) {\n      console.error('Error during authentication:', error);\n    }\n  };\n  const logout = () => {\n    authDispatch({\n      type: authActionTypes.LOGOUT\n    });\n    window.location.href = '/access/login';\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authState,\n      login,\n      logout,\n      updateUserInfo\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"ZUIHA8hvKd0HJxQorort1kde7A0=\");\n_c = AuthProvider;\nconst useAuthContext = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuthContext must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuthContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport { AuthProvider, useAuthContext };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useState","apiUrl","axios","jsxDEV","_jsxDEV","initialAuthState","isAuthenticated","user","id","username","first_name","last_name","email","profile_picture","bio","user_type","authActionTypes","LOGIN","LOGOUT","authReducer","state","action","type","token","payload","AuthContext","AuthProvider","children","_s","authState","authDispatch","setIsAuthenticated","JSON","parse","localStorage","getItem","storedAuthStateString","storedAuthState","undefined","error","console","setItem","stringify","updateUserInfo","responseData","login","message","log","getUserInfo","credentials","response","fetch","method","headers","Authorization","ok","userData","json","logout","window","location","href","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuthContext","_s2","context","Error","$RefreshReg$"],"sources":["/Users/loveveersingh/Downloads/Github - Projects/Calculator/calc/src/utils/context/authentication.js"],"sourcesContent":["// AuthContext.js\nimport React, { createContext, useContext, useReducer, useEffect, useState } from 'react';\nimport apiUrl from '../config/apiUrl';\nimport axios from 'axios'; // Import axios\n\n\nconst initialAuthState = {\n  isAuthenticated: false,\n  user: {\n    id: null,\n    username: '',\n    first_name: '',\n    last_name: '',\n    email: '',\n    profile_picture: null,\n    bio: '',\n    user_type: '',\n  },\n};\n\nconst authActionTypes = {\n  LOGIN: 'LOGIN',\n  LOGOUT: 'LOGOUT',\n};\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case authActionTypes.LOGIN:\n      const { user, token } = action.payload;\n      return { ...state, isAuthenticated: true, user: user, token: token }; // Include token in authState\n    case authActionTypes.LOGOUT:\n      return { ...initialAuthState };\n    default:\n      return state;\n  }\n};\n\n\nconst AuthContext = createContext();\n\nconst AuthProvider = ({ children }) => {\n\n  const [authState, authDispatch] = useReducer(authReducer, initialAuthState);\n\n  const [isAuthenticated, setIsAuthenticated] = useState((JSON.parse(localStorage.getItem('authState'))) !== null ? JSON.parse(localStorage.getItem('authState')).token !== null : false);\n\n  // Load authentication state from localStorage on component mount\n  useEffect(() => {\n    const storedAuthStateString = localStorage.getItem('authState');\n\n    try {\n      const storedAuthState = JSON.parse(storedAuthStateString);\n\n      // Check if a valid token is present\n      setIsAuthenticated(storedAuthState && storedAuthState.token !== null && storedAuthState.token !== undefined);\n\n      if (storedAuthState && storedAuthState.token) {\n        authDispatch({\n          type: authActionTypes.LOGIN,\n          payload: { user: storedAuthState.user, token: storedAuthState.token },\n        });\n      }\n    } catch (error) {\n      console.error('Error parsing stored auth state:', error);\n      setIsAuthenticated(false);\n    }\n  }, [isAuthenticated]);\n\n  // Update localStorage whenever authState changes\n  useEffect(() => {\n    localStorage.setItem('authState', JSON.stringify(authState));\n  }, [authState]);\n\n\n  const updateUserInfo = async (responseData) => {\n      // Update user context with the fetched user information\n        authDispatch({\n          type: authActionTypes.LOGIN,\n          payload: { \n            user: { ...authState.user, user_type: responseData.user_type },\n            isAuthenticated: authState.isAuthenticated,\n            token: authState.token,\n          },\n        });\n  };\n\n  const login = (responseData) => {\n    authDispatch({\n      type: authActionTypes.LOGIN,\n      payload: { \n        user: responseData.user,\n        isAuthenticated: (responseData.message === \"Login successful.\" || responseData.message === \"User registered successfully.\") ? true : false,\n        token: responseData.token,\n      }\n    });\n    console.log(authState);\n  }\n\n  const getUserInfo = async (credentials) => {\n    try {\n      const response = await fetch(`${apiUrl}user/get-user-info/`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Token ${credentials.token}`,\n        },\n      });\n  \n      if (response.ok) {\n        const userData = await response.json();\n        authDispatch({ type: authActionTypes.LOGIN, payload: { user: userData, token: credentials.token } });\n      } else {\n        console.error('Authentication failed');\n      }\n    } catch (error) {\n      console.error('Error during authentication:', error);\n    }\n  };\n  \n  const logout = () => {\n    authDispatch({ type: authActionTypes.LOGOUT });\n    window.location.href = '/access/login';\n  };\n\n\n  return (\n    <AuthContext.Provider value={{ authState, login, logout, updateUserInfo }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nconst useAuthContext = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuthContext must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport { AuthProvider, useAuthContext };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}